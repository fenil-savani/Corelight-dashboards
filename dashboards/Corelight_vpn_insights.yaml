name: Corelight vpn insights
description: ''
timeSelector: {}
sharedTimeInterval:
  enabled: true
  isLive: false
  start: 1d
labels:
- Corelight
- Security Workflow
widgets:
  5843cb6c-a01e-45a1-800f-46016a22432f:
    x: 0
    height: 5
    queryString: |-
      #Vendor = corelight and #event.module = ndr
      | #event.dataset = ndr.vpn
      | in(field=observer.hostname, values=[?system_name])
      | ?{additional_filter=*} and Vendor.vpn_type=?{vpn_type=*}
      | array:reduceAll(array="Vendor.inferences[]", function=[groupBy(Inferences, function=tail(limit=max), limit=max)], var="Inferences")
      | Inferences=?{inference=*}
      | timeChart(Inferences, limit=10)
    end: now
    start: 1d
    width: 12
    y: 6
    interactions:
    - name: Details of inferences
      titleTemplate: Details of {{ fields.Inferences }}
      queryString: |-
        #Vendor = corelight and #event.module = ndr
        | #event.dataset = ndr.vpn
        | in(field=observer.hostname, values=[?system_name])
        | ?additional_filter and Vendor.vpn_type=?vpn_type
        | array:contains(array="Vendor.inferences[]", value=?chart_inference)
      useWidgetTimeWindow: true
      arguments:
        additional_filter: '["{{ parameters.additional_filter }}"]'
        chart_inference: '["{{ fields.Inferences }}"]'
        system_name: '["{{ parameters.system_name }}"]'
        vpn_type: '["{{ parameters.vpn_type }}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      legendPosition: bottom
      interpolation: ''
      xAxisTitle: ''
      legend: true
      horizontalPlotLineLabel: ''
      connect-points: false
      yAxisScale: linear
      plotType: area
      maxSeriesCount: 10
      imputation: none
      yAxisUnit: ''
      series: {}
      yAxisTitle: ''
      stacking: normal
    visualization: time-chart
    title: Inferences over time
    isLive: false
    type: query
  a4ee2caf-d07f-47e2-94d8-d2f98cd7dd2b:
    x: 0
    y: 16
    height: 6
    queryString: |-
      #Vendor = corelight and #event.module = ndr
      | #event.dataset = ndr.vpn
      | in(field=observer.hostname, values=[?system_name])
      | ?{additional_filter=*} and Vendor.vpn_type=?{vpn_type=*}
      | inference_filter := ?inference
      | case {
          !text:contains(string=inference_filter, substring="*") |
          array:contains(array="Vendor.inferences[]", value=?inference);
          text:contains(string=inference_filter, substring="*") | *
      }
      | concatArray(field="Vendor.inferences", separator=", ", as=InferenceList)
      | formatTime(format="%F %r", as="Time")
      | select([Time, source.ip, destination.ip, InferenceList, @rawstring])
      | rename([[source.ip, "Source IP"], [destination.ip, "Destination IP"], [InferenceList, Inferences], [@rawstring, "Raw Data"]])
    end: now
    start: 1d
    width: 12
    options:
      cell-overflow: wrap-text
      configured-columns: {}
      row-numbers-enabled: false
    visualization: table-view
    title: VPN inference log data
    isLive: false
    type: query
  b82c8bd2-4352-4eda-89c7-2645bedeeb2c:
    x: 8
    height: 5
    queryString: |-
      #Vendor = corelight and #event.module = ndr
      | #event.dataset = ndr.vpn
      | in(field=observer.hostname, values=[?system_name])
      | ?{additional_filter=*} and Vendor.vpn_type=?{vpn_type=*}
      | inference_filter := ?inference
      | case {
          !text:contains(string=inference_filter, substring="*") |
          array:contains(array="Vendor.inferences[]", value=?inference);
          text:contains(string=inference_filter, substring="*") | *
      }
      | top([Vendor.vpn_type])
    end: now
    start: 1d
    width: 4
    y: 1
    interactions:
    - name: Details of vpn types
      titleTemplate: Details of {{ fields.Vendor.vpn_type }}
      queryString: |-
        #Vendor = corelight and #event.module = ndr
        | #event.dataset = ndr.vpn
        | in(field=observer.hostname, values=[?system_name])
        | ?additional_filter and Vendor.vpn_type=?vpn_type
        | inference_filter := ?inference
        | case {
            !text:contains(string=inference_filter, substring="*") |
            array:contains(array="Vendor.inferences[]", value=?inference);
            text:contains(string=inference_filter, substring="*") | *
        }
        | Vendor.vpn_type=?chart_vpn
      useWidgetTimeWindow: true
      arguments:
        chart_vpn: '["{{ fields.Vendor.vpn_type }}"]'
        additional_filter: '["{{ parameters.additional_filter }}"]'
        system_name: '["{{ parameters.system_name }}"]'
        inference: '["{{ parameters.inference }}"]'
        vpn_type: '["{{ parameters.vpn_type }}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      series: {}
      maxSeriesCount: 10
      innerRadius: 0
      legendPosition: right
      legendTitle: VPN Types
    visualization: pie-chart
    title: VPN type
    isLive: false
    type: query
  c0e2293d-84de-48d4-89ee-98cf95a3085f:
    x: 0
    height: 5
    queryString: |-
      #Vendor = corelight and #event.module = ndr
      | #event.dataset = ndr.vpn
      | in(field=observer.hostname, values=[?system_name])
      | ?{additional_filter=*} and Vendor.vpn_type=?{vpn_type=*}
      | array:reduceAll(array="Vendor.inferences[]", function=[groupBy(Inferences, function=tail(limit=max), limit=max)], var="Inferences")
      | Inferences=?{inference=*}
      | top([Inferences])
    end: now
    start: 1d
    width: 4
    y: 1
    interactions:
    - name: Details of inference type
      titleTemplate: Details of {{ fields.Inferences }}
      queryString: |-
        #Vendor = corelight and #event.module = ndr
        | #event.dataset = ndr.vpn
        | in(field=observer.hostname, values=[?system_name])
        | ?additional_filter and Vendor.vpn_type=?vpn_type
        | inference_filter := ?chart_inference
        | case {
            !text:contains(string=inference_filter, substring="*") |
            array:contains(array="Vendor.inferences[]", value=?chart_inference);
            text:contains(string=inference_filter, substring="*") | *
        }
      useWidgetTimeWindow: true
      arguments:
        additional_filter: '["{{ parameters.additional_filter }}"]'
        chart_inference: '["{{ fields.Inferences }}"]'
        system_name: '["{{ parameters.system_name }}"]'
        vpn_type: '["{{ parameters.vpn_type }}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      innerRadius: 0
      legendPosition: right
      maxSeriesCount: 10
      series: {}
    visualization: pie-chart
    title: Inference type
    isLive: false
    type: query
  note-1736247990688-0:
    x: 0
    y: 0
    description: VPN Inferences
    height: 1
    text: ''
    width: 12
    title: VPN insights
    type: note
  d84f186f-6f5e-4259-8541-dbdefa6ae37a:
    x: 4
    height: 5
    queryString: |-
      #Vendor = corelight and #event.module = ndr
      | #event.dataset = ndr.vpn
      | in(field=observer.hostname, values=[?system_name])
      | ?{additional_filter=*} and Vendor.vpn_type=?{vpn_type=*}
      | inference_filter := ?inference
      | case {
          !text:contains(string=inference_filter, substring="*") |
          array:contains(array="Vendor.inferences[]", value=?inference);
          text:contains(string=inference_filter, substring="*") | *
      }
      | top([source.ip], limit=20)
    end: now
    start: 1d
    width: 4
    y: 1
    interactions:
    - name: Details of top vpn users
      titleTemplate: Details of {{ fields.source.ip }}
      queryString: |-
        #Vendor = corelight and #event.module = ndr
        | #event.dataset = ndr.vpn
        | in(field=observer.hostname, values=[?system_name])
        | ?additional_filter and Vendor.vpn_type=?vpn_type
        | inference_filter := ?inference
        | case {
            !text:contains(string=inference_filter, substring="*") |
            array:contains(array="Vendor.inferences[]", value=?inference);
            text:contains(string=inference_filter, substring="*") | *
        }
        | source.ip=?chart_ip
      useWidgetTimeWindow: true
      arguments:
        chart_ip: '["{{ fields.source.ip }}"]'
        additional_filter: '["{{ parameters.additional_filter }}"]'
        system_name: '["{{ parameters.system_name }}"]'
        inference: '["{{ parameters.inference }}"]'
        vpn_type: '["{{ parameters.vpn_type }}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      series: {}
      innerRadius: 0
      legendPosition: right
      legendTitle: Source
      maxSeriesCount: 20
      withLegendTitle: true
    visualization: pie-chart
    title: Top(20) vpn users
    isLive: false
    type: query
  04784b2d-0256-41d6-a72a-772275171643:
    x: 6
    height: 5
    queryString: |-
      #Vendor = corelight and #event.module = ndr
      | #event.dataset = ndr.vpn
      | in(field=observer.hostname, values=[?system_name])
      | ?{additional_filter=*} and Vendor.vpn_type=?{vpn_type=*}
      | inference_filter := ?inference
      | case {
          !text:contains(string=inference_filter, substring="*") |
          array:contains(array="Vendor.inferences[]", value=?inference);
          text:contains(string=inference_filter, substring="*") | *
      }
      | groupBy([tls.client.ja3, tls.server.ja3s], limit=max)
      | sort(_count, limit=max)
      | default(value="unknown", field=[tls.client.ja3, tls.server.ja3s])
      | default(value="0", field=[_count])
      | rename([[tls.client.ja3, JA3], [tls.server.ja3s, JA3S], [_count, Count]])
    end: now
    start: 1d
    width: 6
    y: 11
    interactions:
    - name: Details of vpn finger prints
      titleTemplate: Details of {{ fields.JA3 }}
      queryString: |-
        #Vendor = corelight and #event.module = ndr
        | #event.dataset = ndr.vpn
        | in(field=observer.hostname, values=[?system_name])
        | ?additional_filter and Vendor.vpn_type=?vpn_type
        | inference_filter := ?inference
        | case {
            !text:contains(string=inference_filter, substring="*") |
            array:contains(array="Vendor.inferences[]", value=?inference);
            text:contains(string=inference_filter, substring="*") | *
        }
        | tls.client.ja3=?table_ja3 and tls.server.ja3s=?table_ja3s
      useWidgetTimeWindow: true
      arguments:
        table_ja3s: '["{{ fields.JA3S }}"]'
        additional_filter: '["{{ parameters.additional_filter }}"]'
        table_ja3: '["{{ fields.JA3 }}"]'
        system_name: '["{{ parameters.system_name }}"]'
        inference: '["{{ parameters.inference }}"]'
        vpn_type: '["{{ parameters.vpn_type }}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      cell-overflow: wrap-text
      configured-columns: {}
      row-numbers-enabled: false
    visualization: table-view
    title: VPN JA3 finger prints
    isLive: false
    type: query
  2380750f-8843-4957-87ff-f67e41e98e6e:
    x: 0
    y: 11
    height: 5
    queryString: |-
      #Vendor = corelight and #event.module = ndr
      | #event.dataset = ndr.vpn
      | in(field=observer.hostname, values=[?system_name])
      | ?{additional_filter=*} and Vendor.vpn_type=?{vpn_type=*}
      | network.protocol="spicy*"
      | inference_filter := ?inference
      | case {
          !text:contains(string=inference_filter, substring="*") |
          array:contains(array="Vendor.inferences[]", value=?inference);
          text:contains(string=inference_filter, substring="*") | *
      }
      | ipLocation(destination.ip, as=GeoIP)
      | groupBy([source.ip, destination.ip, destination.port, GeoIP.country, network.protocol, network.transport], function=[sum("Vendor.resp_bytes", as=resp_bytes_sum), sum("Vendor.orig_bytes", as=orig_bytes_sum), count()], limit=max)
      | total_bytes := orig_bytes_sum + resp_bytes_sum
      | sort(total_bytes, limit=20)
      | rename([[source.ip, "Source IP"], [destination.ip, "Destination IP"], [destination.port, "Destination Port"], [network.transport, Protocol], [GeoIP.country, "Destination Country"], [network.protocol, Service], [orig_bytes_sum, "Sum of Source Bytes"], [resp_bytes_sum, "Sum of Destination Bytes"], [total_bytes, Gigabytes], [_count, "Number of Connections"]])
    end: now
    start: 1d
    width: 6
    options:
      cell-overflow: wrap-text
      configured-columns:
        Gigabytes:
          data-type: bytes
        Sum of Destination Bytes:
          data-type: bytes
        Sum of Source Bytes:
          data-type: bytes
      row-numbers-enabled: false
    visualization: table-view
    title: Largest transfers between host pairs over vpn
    isLive: false
    type: query
$schema: https://schemas.humio.com/dashboard/v0.17.0
parameters:
  additional_filter:
    label: Additional filter
    order: 3
    type: text
    defaultValue: '*'
    width: 1
  inference:
    label: Inference
    query: |-
      #Vendor = corelight and #event.module = ndr
      | #event.dataset = ndr.vpn
      | in(field=observer.hostname, values=[?system_name])
      | array:reduceAll(array="Vendor.inferences[]", function=[groupBy(Inferences, function=tail(limit=max), limit=max)], var="Inferences")
      | select([Inferences])
    timeInterval: 24h
    useDashboardTimeIfSet: true
    type: query
    defaultValue: '*'
    width: 1
    order: 2
    valueField: Inferences
  system_name:
    label: Corelight sensor
    query: |-
      #Vendor = corelight and #event.module = ndr
      | #event.dataset = ndr.vpn
      | groupBy([observer.hostname], function=[])
    timeInterval: 24h
    useDashboardTimeIfSet: true
    type: query
    defaultValue: '*'
    width: 1
    order: 0
    valueField: observer.hostname
  vpn_type:
    label: VPN type
    query: |-
      #Vendor = corelight and #event.module = ndr
      | #event.dataset = ndr.vpn
      | in(field=observer.hostname, values=[?system_name])
      | groupBy([Vendor.vpn_type], function=[], limit=max)
    timeInterval: 24h
    useDashboardTimeIfSet: true
    type: query
    defaultValue: '*'
    width: 1
    order: 1
    valueField: Vendor.vpn_type
